package javagame.cokeandcode;

/**
 * The data map from our example game. This holds the state and context of each tile
 * on the map. It also implements the interface required by the path finder. It's implementation
 * of the path finder related methods add specific handling for the types of units
 * and terrain in the example game.
 * 
 * @author Kevin Glass
 */
public class GameMap implements TileBasedMap {
	/** The map width in tiles */
	public static final int WIDTH = 30;
	/** The map height in tiles */
	public static final int HEIGHT = 30;
	
	/** Indicate grass terrain at a given location */
	public static final int GRASS = 0;
	/** Indicate water terrain at a given location */
	public static final int WATER = 1;
	/** Indicate trees terrain at a given location */
	public static final int TREES = 2;
	/** Indicate a plane is at a given location */
	public static final int PLANE = 3;
	/** Indicate a boat is at a given location */
	public static final int BOAT = 4;
	/** Indicate a tank is at a given location */
	public static final int TANK = 5;
	
	/** The terrain settings for each tile in the map */
	private int[][] terrain = new int[WIDTH][HEIGHT];
	/** The unit in each tile of the map */
	private int[][] units = new int[WIDTH][HEIGHT];
	/** Indicator if a given tile has been visited during the search */
	private boolean[][] visited = new boolean[WIDTH][HEIGHT];

	public GameMap() {
		// create some test data

		fillArea(0,0,5,5,WATER);
		fillArea(0,5,3,10,WATER);
		fillArea(0,5,3,10,WATER);
		fillArea(0,15,7,15,WATER);
		fillArea(7,26,22,4,WATER);
		
		fillArea(17,5,10,3,TREES);
		fillArea(20,8,5,3,TREES);
		
		fillArea(8,2,7,3,TREES);
		fillArea(10,5,3,3,TREES);
		
		units[15][15] = TANK;
		units[2][7] = BOAT;
		units[20][25] = PLANE;
	}

	private void fillArea(int x, int y, int width, int height, int type) {
		for (int xp=x;xp<x+width;xp++) {
			for (int yp=y;yp<y+height;yp++) {
				terrain[xp][yp] = type;
			}
		}
	}

	public void clearVisited() {
		for (int x=0;x<getWidthInTiles();x++) {
			for (int y=0;y<getHeightInTiles();y++) {
				visited[x][y] = false;
			}
		}
	}

	public boolean visited(int x, int y) {
		return visited[x][y];
	}
	
	public int getTerrain(int x, int y) {
		return terrain[x][y];
	}

	public int getUnit(int x, int y) {
		return units[x][y];
	}
	
	public void setUnit(int x, int y, int unit) {
		units[x][y] = unit;
	}
	
	public boolean blocked(Mover mover, int x, int y) {
		// if theres a unit at the location, then it's blocked

		if (getUnit(x,y) != 0) {
			return true;
		}
		
		int unit = ((UnitMover) mover).getType();
		
		// planes can move anywhere

		if (unit == PLANE) {
			return false;
		}
		// tanks can only move across grass

		if (unit == TANK) {
			return terrain[x][y] != GRASS;
		}
		// boats can only move across water

		if (unit == BOAT) {
			return terrain[x][y] != WATER;
		}
		
		// unknown unit so everything blocks

		return true;
	}


	public float getCost(Mover mover, int sx, int sy, int tx, int ty) {
		return 1;
	}

	public int getHeightInTiles() {
		return WIDTH;
	}

	public int getWidthInTiles() {
		return HEIGHT;
	}

	public void pathFinderVisited(int x, int y) {
		visited[x][y] = true;
	}
	
	
}

