package cokeandcode;


import java.util.ArrayList;
import java.util.Collections;



	public class AStarPathFinder implements PathFinder {
		/** The set of nodes that have been searched through */
		private ArrayList closed = new ArrayList();
		/** The set of nodes that we do not yet consider fully searched */
		private SortedList open = new SortedList();
		
		/** The map being searched */
		private TileBasedMap map;
		/** The maximum depth of search we're willing to accept before giving up */
		private int maxSearchDistance;
		
		/** The complete set of nodes across the map */
		private Node[][] nodes;
		/** True if we allow diaganol movement */
		private boolean allowDiagMovement;
		/** The heuristic we're applying to determine which nodes to search first */
		private AStarHeuristic heuristic;
		

		public AStarPathFinder(TileBasedMap map, int maxSearchDistance, boolean allowDiagMovement) {
			this(map, maxSearchDistance, allowDiagMovement, new ClosestHeuristic());
		}


		public AStarPathFinder(TileBasedMap map, int maxSearchDistance, 
							   boolean allowDiagMovement, AStarHeuristic heuristic) {
			this.heuristic = heuristic;
			this.map = map;
			this.maxSearchDistance = maxSearchDistance;
			this.allowDiagMovement = allowDiagMovement;
			
			nodes = new Node[map.getWidthInTiles()][map.getHeightInTiles()];
			for (int x=0;x<map.getWidthInTiles();x++) {
				for (int y=0;y<map.getHeightInTiles();y++) {
					nodes[x][y] = new Node(x,y);
				}
			}
		}
		
	
		public Path findPath(Mover mover, int sx, int sy, int tx, int ty) {
			// easy first check, if the destination is blocked, we can't get there

			if (map.blocked(mover, tx, ty)) {
				return null;
			}
			
			// initial state for A*. The closed group is empty. Only the starting

			// tile is in the open list and it'e're already there
			nodes[sx][sy].cost = 0;
			nodes[sx][sy].depth = 0;
			closed.clear();
			open.clear();
			open.add(nodes[sx][sy]);
			
			nodes[tx][ty].parent = null;
			
			// while we haven'n't exceeded our max search depth
			int maxDepth = 0;
			while ((maxDepth < maxSearchDistance) && (open.size() != 0)) {
				// pull out the first node in our open list, this is determined to 

				// be the most likely to be the next step based on our heuristic

				Node current = getFirstInOpen();
				if (current == nodes[tx][ty]) {
					break;
				}
				
				removeFromOpen(current);
				addToClosed(current);
				
				// search through all the neighbours of the current node evaluating

				// them as next steps

				for (int x=-1;x<2;x++) {
					for (int y=-1;y<2;y++) {
						// not a neighbour, its the current tile

						if ((x == 0) && (y == 0)) {
							continue;
						}
						
						// if we're not allowing diaganol movement then only 

						// one of x or y can be set

						if (!allowDiagMovement) {
							if ((x != 0) && (y != 0)) {
								continue;
							}
						}
						
						// determine the location of the neighbour and evaluate it

						int xp = x + current.x;
						int yp = y + current.y;
						
						if (isValidLocation(mover,sx,sy,xp,yp)) {
							// the cost to get to this node is cost the current plus the movement

							// cost to reach this node. Note that the heursitic value is only used

							// in the sorted open list

							float nextStepCost = current.cost + getMovementCost(mover, current.x, current.y, xp, yp);
							Node neighbour = nodes[xp][yp];
							map.pathFinderVisited(xp, yp);
							
							// if the new cost we've determined for this node is lower than 

							// it has been previously makes sure the node hasn'e've
							// determined that there might have been a better path to get to

							// this node so it needs to be re-evaluated

							if (nextStepCost < neighbour.cost) {
								if (inOpenList(neighbour)) {
									removeFromOpen(neighbour);
								}
								if (inClosedList(neighbour)) {
									removeFromClosed(neighbour);
								}
							}
							
							// if the node hasn't already been processed and discarded then

							// reset it's cost to our current cost and add it as a next possible

							// step (i.e. to the open list)

							if (!inOpenList(neighbour) && !(inClosedList(neighbour))) {
								neighbour.cost = nextStepCost;
								neighbour.heuristic = getHeuristicCost(mover, xp, yp, tx, ty);
								maxDepth = Math.max(maxDepth, neighbour.setParent(current));
								addToOpen(neighbour);
							}
						}
					}
				}
			}

			// since we'e've run out of search 
			// there was no path. Just return null

			if (nodes[tx][ty].parent == null) {
				return null;
			}
			
			// At this point we've definitely found a path so we can uses the parent

			// references of the nodes to find out way from the target location back

			// to the start recording the nodes on the way.

			Path path = new Path();
			Node target = nodes[tx][ty];
			while (target != nodes[sx][sy]) {
				path.prependStep(target.x, target.y);
				target = target.parent;
			}
			path.prependStep(sx,sy);
			
			// thats it, we have our path 

			return path;
		}


		protected Node getFirstInOpen() {
			return (Node) open.first();
		}
		

		protected void addToOpen(Node node) {
			open.add(node);
		}
		

		protected boolean inOpenList(Node node) {
			return open.contains(node);
		}
		

		protected void removeFromOpen(Node node) {
			open.remove(node);
		}
		

		protected void addToClosed(Node node) {
			closed.add(node);
		}
		

		protected boolean inClosedList(Node node) {
			return closed.contains(node);
		}
		

		protected void removeFromClosed(Node node) {
			closed.remove(node);
		}
		

		protected boolean isValidLocation(Mover mover, int sx, int sy, int x, int y) {
			boolean invalid = (x < 0) || (y < 0) || (x >= map.getWidthInTiles()) || (y >= map.getHeightInTiles());
			
			if ((!invalid) && ((sx != x) || (sy != y))) {
				invalid = map.blocked(mover, x, y);
			}
			
			return !invalid;
		}
		

		public float getMovementCost(Mover mover, int sx, int sy, int tx, int ty) {
			return map.getCost(mover, sx, sy, tx, ty);
		}


		public float getHeuristicCost(Mover mover, int x, int y, int tx, int ty) {
			return heuristic.getCost(map, mover, x, y, tx, ty);
		}
		
		/**
		 * A simple sorted list
		 *
		 * @author kevin
		 */
		private class SortedList {
			/** The list of elements */
			private ArrayList list = new ArrayList();
			
			/**
			 * Retrieve the first element from the list
			 *  
			 * @return The first element from the list
			 */
			public Object first() {
				return list.get(0);
			}
			
			/**
			 * Empty the list
			 */
			public void clear() {
				list.clear();
			}
			
			/**
			 * Add an element to the list - causes sorting
			 * 
			 * @param o The element to add
			 */
			public void add(Object o) {
				list.add(o);
				Collections.sort(list);
			}
			

			public void remove(Object o) {
				list.remove(o);
			}
		

			public int size() {
				return list.size();
			}
			

			public boolean contains(Object o) {
				return list.contains(o);
			}
		}

		private class Node implements Comparable {
			/** The x coordinate of the node */
			private int x;
			/** The y coordinate of the node */
			private int y;
			/** The path cost for this node */
			private float cost;
			/** The parent of this node, how we reached it in the search */
			private Node parent;
			/** The heuristic cost of this node */
			private float heuristic;
			/** The search depth of this node */
			private int depth;
			
			/**
			 * Create a new node
			 * 
			 * @param x The x coordinate of the node
			 * @param y The y coordinate of the node
			 */
			public Node(int x, int y) {
				this.x = x;
				this.y = y;
			}
			
			/**
			 * Set the parent of this node
			 * 
			 * @param parent The parent node which lead us to this node
			 * @return The depth we have no reached in searching
			 */
			public int setParent(Node parent) {
				depth = parent.depth + 1;
				this.parent = parent;
				
				return depth;
			}
			
			/**
			 * @see Comparable#compareTo(Object)
			 */
			public int compareTo(Object other) {
				Node o = (Node) other;
				
				float f = heuristic + cost;
				float of = o.heuristic + o.cost;
				
				if (f < of) {
					return -1;
				} else if (f > of) {
					return 1;
				} else {
					return 0;
				}
			}
		}
	}

