package pathfinding;

import java.util.LinkedList;
import java.util.List;


public class Astar {
	
	private double totalCost = 0;
	
	public List<Node> findShortestPath(Node startNode,Node endNode){
		
		LinkedList<Node> openList = new LinkedList<Node>();
		LinkedList<Node> closedList = new LinkedList<Node>();
        
		openList.add(startNode);		  
		startNode.parent = null;
		  
		while (!openList.isEmpty()) {
		    Node currentNode = (Node)openList.removeFirst();
		    if (currentNode == endNode) {
		      // path found!
		      return constructPath(endNode);
		    }
		    else {
		      closedList.add(currentNode);
		      openList.remove(currentNode);
		      
		      for (Node node : currentNode.getAdjacent()) {		       
		        if (!closedList.contains(node) && !openList.contains(node)) 
		        {
		        	node.parent = node;
		        	node.setG(currentNode.getG());
		        	node.setH(currentNode.getH());
		        	openList.add(node);
		        	
		        }
		      }
		    }
		  }
        //loop is over, return true
        return null;
       
	}
	
	public void addToCost(Node nextNode){		
		totalCost = totalCost +  nextNode.getCost();		
	}
	
    public double calcManhattanDistance(Node start, Node end){
        return Math.abs(start.getX() - end.getX()) + Math.abs(start.getY() - end.getY());
    }
    
    public double calcScorePerTile(Node start, Node end){
    	return totalCost + calcManhattanDistance(start, end);
    	
    }
    
   
//    protected Double calculateF(Node note, T from, T to){
//                    Double g =  g(from, to) + ((p.parent != null) ? note.parent.g : 0.0);
//                    Double h = h(from, to);
//
//                    note.g = g;
//                    note.f = g + h;
//
//                    return f;
//    }

	
	/**
    Construct the path, not including the start node.
	 */
	protected List<Node> constructPath(Node node) {
		
		LinkedList<Node> path = new LinkedList<Node>();		
		while (node.parent != null) {
			path.addFirst(node);
			node = node.parent;
		}		
		return path;
	}


}
