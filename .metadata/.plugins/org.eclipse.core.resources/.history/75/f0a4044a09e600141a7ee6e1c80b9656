package pathfinding;

import java.util.LinkedList;
import java.util.List;


public class Astar {
	public static final int GOAL_X_VALUE = 4;	
	public static final int GOAL_Y_VALUE = 4;
	private float totalCost = 0;
	private float distance = 0;
	
	public List<Node> findShortestPath(Node startNode,Node endNode){
		
		LinkedList<Node> openList = new LinkedList<Node>();
		LinkedList<Node> closedList = new LinkedList<Node>();
        
		openList.add(startNode);		  
		startNode.parent = null;
		  
		while (!openList.isEmpty()) {
		    Node currentNode = (Node)openList.removeFirst();
		    if (currentNode == endNode) {
		      // path found!
		      return constructPath(endNode);
		    }
		    else {
		      closedList.add(currentNode);
		      openList.remove(currentNode);
		      
		      for (Node node : currentNode.getAdjacent()) {		       
		        if (!closedList.contains(node) && !openList.contains(node)) 
		        {
		        	node.parent = node;
		        	node.setgCost(gCost(addToCost(node);
		        	node.sethCost(calcManhattanDistance(node));
		        	openList.add(node);
		        	
		        }
		      }
		    }
		  }
        //loop is over, return true
        return null;
       
	}
	
	protected float addToCost(Node nextNode){		
		totalCost = totalCost +  nextNode.getCost();		
	}
	
    protected float calcManhattanDistance(Node start){
        distance  = Math.abs(start.getX() - GOAL_X_VALUE) + Math.abs(start.getY() - GOAL_Y_VALUE);
    }
    
    public float getScore(){
    	return totalCost + distance;
    	
    }

	protected List<Node> constructPath(Node node) {
		
		LinkedList<Node> path = new LinkedList<Node>();		
		while (node.parent != null) {
			path.addFirst(node);
			node = node.parent;
		}		
		return path;
	}


}
